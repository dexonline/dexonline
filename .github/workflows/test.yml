name: Run Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: dexonline
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -u root --password=admin" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: intl, mysqli, pdo_mysql

      - name: Install and configure Apache
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2
          sudo a2enmod rewrite
          sudo cp tools/docker/php/000-default.conf /etc/apache2/sites-available/000-default.conf
          sudo service apache2 restart
          sudo rm -rf /var/www/html
          sudo ln -s $GITHUB_WORKSPACE /var/www/html

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Create Config.php from sample
        run: |
          cp Config.php.sample Config.php
          sed -i 's|const DATABASE = .*;|const DATABASE = "mysql://root:admin@127.0.0.1/dexonline";|' Config.php
          sed -i 's|const TEST_DATABASE = .*;|const TEST_DATABASE = "mysql://root:admin@127.0.0.1/dexonline";|' Config.php
          sed -i 's|const TEST_MODE = false;|const TEST_MODE = true;|' Config.php
          sed -i 's|const DEVELOPMENT_MODE = false;|const DEVELOPMENT_MODE = true;|' Config.php
          sed -i 's|const URL_PREFIX = .*;|const URL_PREFIX = "/";|' Config.php

      - name: Setup MySQL credentials
        run: |
          echo "[client]
          user=root
          password=admin
          host=127.0.0.1" > ~/.my.cnf
          chmod 600 ~/.my.cnf

      - name: Create log file and set permissions
        run: |
          touch /tmp/dexonline.log
          chmod 666 /tmp/dexonline.log
          sed -i 's|const LOG_FILE = .*;|const LOG_FILE = "/tmp/dexonline.log";|' Config.php
          sudo chown -R www-data:www-data $GITHUB_WORKSPACE
          sudo chmod -R 775 $GITHUB_WORKSPACE

      - name: Run setup script
        run: bash tools/setup.sh
        env:
          MYSQL_PWD: admin

      - name: Configure hosts file
        run: |
          echo "127.0.0.1 dex.localhost" | sudo tee -a /etc/hosts

      - name: Setup Chrome Browser
        id: setup-chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install Selenium Runner
        run: npm install -g selenium-side-runner

      - name: Start Xvfb (Virtual Display)
        run: |
          # Install all tools needed for the virtual display and screenshots
          sudo apt-get update && sudo apt-get install -y xvfb imagemagick x11-utils
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &

      - name: Start Matching Chromedriver
        run: |
          # Use the Chromedriver downloaded by setup-chrome action to ensure versions match
          ${{ steps.setup-chrome.outputs.chrome-driver }} --port=9515 &
          # Wait for Chromedriver to be ready
          while ! curl -s http://localhost:9515/status; do
            echo "Waiting for Chromedriver..."
            sleep 1
          done
          echo "Chromedriver is ready."

      - name: Run Selenium Tests
        run: |
          # Create the config file for the runner
          cat > .side.yml << EOL
          capabilities:
            browserName: "chrome"
            "goog:chromeOptions":
              args:
                - "--no-sandbox"
                - "--disable-dev-shm-usage"
                - "--headless"
                - "--window-size=1920,1080"
          server: "http://localhost:9515"
          EOL

          # Don't exit the script if tests fail, so we can take a screenshot
          set +e
          export DISPLAY=:99

          # Run the tests
          selenium-side-runner \
            --config-file .side.yml \
            --base-url http://dex.localhost \
            --timeout 30000 \
            --output-directory /tmp/selenium-logs \
            test/esential.json

          # Capture the exit code from the test runner
          EXIT_CODE=$?

          # Take a screenshot ONLY if the tests failed
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Tests failed with exit code $EXIT_CODE. Capturing screenshot..."
            xwd -root -display :99 | convert xwd:- screenshot.png
            echo "Screenshot saved as screenshot.png"
          fi

          # Exit with the original exit code to mark the job as failed or passed
          exit $EXIT_CODE

      - name: Upload Artifacts on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-failure-artifacts
          path: |
            screenshot.png
            /tmp/selenium-logs/
            /tmp/dexonline.log
          retention-days: 30

      - name: Collect Logs on Completion
        if: always()
        run: |
          echo "### Selenium Logs ###"
          find /tmp/selenium-logs -name "*.log" -exec cat {} \; || echo "No Selenium logs found"
          echo "### Apache Error Logs ###"
          sudo cat /var/log/apache2/error.log || echo "No Apache error logs found"
          echo "### Application Logs ###"
          cat /tmp/dexonline.log || echo "No application logs found"
