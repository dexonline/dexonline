name: Run Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: admin
          MYSQL_DATABASE: dexonline
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1 -u root --password=admin" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: intl, mysqli, pdo_mysql

      - name: Install and configure Apache
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2
          sudo a2enmod rewrite

          # Copy the custom Apache configuration from the specified location
          sudo cp tools/docker/php/000-default.conf /etc/apache2/sites-available/000-default.conf

          sudo service apache2 restart
          sudo rm -rf /var/www/html
          sudo ln -s $GITHUB_WORKSPACE /var/www/html
          sudo chown -R www-data:www-data /var/www/html
          sudo chmod -R 755 /var/www/html

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist

      - name: Create Config.php from sample
        run: |
          cp Config.php.sample Config.php
          sed -i 's|const DATABASE = .*;|const DATABASE = "mysql://root:admin@127.0.0.1/dexonline";|' Config.php
          sed -i 's|const TEST_DATABASE = .*;|const TEST_DATABASE = "mysql://root:admin@127.0.0.1/dexonline";|' Config.php
          sed -i 's|const TEST_MODE = false;|const TEST_MODE = true;|' Config.php
          sed -i 's|const DEVELOPMENT_MODE = false;|const DEVELOPMENT_MODE = true;|' Config.php
          sed -i 's|const URL_PREFIX = .*;|const URL_PREFIX = "/";|' Config.php

      - name: Setup MySQL credentials
        run: |
          echo "[client]
          user=root
          password=admin
          host=127.0.0.1" > ~/.my.cnf
          chmod 600 ~/.my.cnf

      - name: Create log file
        run: |
          touch /tmp/dexonline.log
          chmod 666 /tmp/dexonline.log
          sed -i 's|const LOG_FILE = .*;|const LOG_FILE = "/tmp/dexonline.log";|' Config.php

      - name: Run setup script
        run: bash tools/setup.sh
        env:
          MYSQL_PWD: admin

      # Configure hosts file
      - name: Configure hosts file
        run: |
          echo "127.0.0.1 dex.localhost" | sudo tee -a /etc/hosts
          echo "127.0.0.1 localhost" | sudo tee -a /etc/hosts
          cat /etc/hosts

      # Setup Chrome
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      # Setup ChromeDriver
      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      # Install NodeJS
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install Selenium dependencies
      - name: Install Selenium dependencies
        run: |
          npm install -g selenium-side-runner
          npm install -g selenium-webdriver

          # Create a directory for debug logs
          mkdir -p /tmp/selenium-logs

      # Start ChromeDriver with enhanced logging
      - name: Start ChromeDriver
        run: |
          # Start ChromeDriver in the background with more logging
          chromedriver --port=4444 --verbose --log-path=/tmp/selenium-logs/chromedriver.log &

          # Wait for ChromeDriver to start
          sleep 5

          # Verify ChromeDriver is running
          curl -s http://localhost:4444/status || echo "ChromeDriver not responding"

      # Create a modified test file with enhanced session handling
      - name: Create modified test file
        run: |
          # Create a backup of the original test file
          cp test/dexonline-test-suite.side test/dexonline-test-suite.original.side

          # Apply modifications to enhance session handling
          # This is a simple example - adjust as needed
          cat test/dexonline-test-suite.original.side | \
            sed 's/"storeWindowHandle"/"pause", "target": "1000"\n    },\n    {\n      "id": ".*", "comment": "Added pause before store window handle", "command": "storeWindowHandle"/g' > \
            test/dexonline-test-suite.modified.side

      # Run each test with increased session timeout and better error handling
      - name: Run tests with enhanced session handling
        run: |
          # Run tests with session debugging
          selenium-side-runner \
            -c "browserName=chrome goog:chromeOptions.args=[--no-sandbox,--disable-dev-shm-usage,--headless,--disable-gpu,--window-size=1920,1080]" \
            --base-url http://localhost \
            --timeout 120000 \
            --output-directory=/tmp/selenium-logs \
            test/dexonline-test-suite.side
        env:
          # Enable all debug logging
          DEBUG: selenium-side-runner:*,selenium-webdriver:*
          # Set session timeouts
          SELENIUM_BROWSER_SESSION_TIMEOUT: 300000
          # Increase stability
          SELENIUM_SESSION_RETRY_ATTEMPTS: 3
          # Disable Promise Manager (deprecated)
          SELENIUM_PROMISE_MANAGER: false

      # If tests failed, collect and display logs
      - name: Collect logs on failure
        if: ${{ failure() }}
        run: |
          echo "### ChromeDriver Logs ###"
          cat /tmp/selenium-logs/chromedriver.log || echo "No ChromeDriver logs found"

          echo "### Apache Error Logs ###"
          sudo cat /var/log/apache2/error.log || echo "No Apache error logs found"

          echo "### Application Logs ###"
          cat /tmp/dexonline.log || echo "No application logs found"
